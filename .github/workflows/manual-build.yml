name: Manual Build

on:
  workflow_dispatch:

jobs:
  build:
    name: Build
    strategy:
      matrix:
        dotnet-runtime:
          - target: win-x64
            mac-bundle: ${{ false }}
            runs-on: ubuntu-latest
          - target: osx-arm64
            mac-bundle: ${{ true }}
            runs-on: ubuntu-latest
    runs-on: ${{ matrix.dotnet-runtime.runs-on }}
    env:
      binariesName: Woohoo.Noise.Player-${{ matrix.dotnet-runtime.target }}
      bundleName: Woohoo.Noise.Player.app
      bundleIconName: Woohoo.Noise.Player.icns
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Build / Publish
      run: dotnet publish src/Woohoo.Noise.Player/Woohoo.Noise.Player.csproj -f net9.0 -r ${{ matrix.dotnet-runtime.target }} -c Release --self-contained -p:PublishSingleFile=true -p:DebugType=None -p:DebugSymbols=False

    - name: Zip binaries
      working-directory: ${{ github.workspace }}/bin/Release/Woohoo.Noise.Player/net9.0/${{ matrix.dotnet-runtime.target }}/publish
      run: zip -r ${{ github.workspace }}/bin/Release/Woohoo.Noise.Player/net9.0/${{ env.binariesName }}.zip *

    - name: Upload binaries artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.dotnet-runtime.target }}
        path: bin/Release/Woohoo.Noise.Player/net9.0/${{ env.binariesName }}.zip
        
    - name: Build MacOS bundle
      if: ${{ matrix.dotnet-runtime.mac-bundle }}
      run: |
        mkdir bin/bundle
        mkdir bin/bundle/${{ matrix.dotnet-runtime.target }}
        mkdir bin/bundle/${{ matrix.dotnet-runtime.target }}/${{ env.bundleName }}
        mkdir bin/bundle/${{ matrix.dotnet-runtime.target }}/${{ env.bundleName }}/Contents
        mkdir bin/bundle/${{ matrix.dotnet-runtime.target }}/${{ env.bundleName }}/Contents/MacOS
        mkdir bin/bundle/${{ matrix.dotnet-runtime.target }}/${{ env.bundleName }}/Contents/Resources
        cp src/Woohoo.Noise.Player/MacOS/Info.plist bin/bundle/${{ matrix.dotnet-runtime.target }}/${{ env.bundleName }}/Contents/Info.plist
        cp src/Woohoo.Noise.Player/MacOS/${{ env.bundleIconName }} bin/bundle/${{ matrix.dotnet-runtime.target }}/${{ env.bundleName }}/Contents/Resources/${{ env.bundleIconName }}
        cp -a bin/Release/Woohoo.Noise.Player/net9.0/${{ matrix.dotnet-runtime.target }}/publish/. bin/bundle/${{ matrix.dotnet-runtime.target }}/${{ env.bundleName }}/Contents/MacOS

    - name: Display MacOS bundle folder contents
      if: ${{ matrix.dotnet-runtime.mac-bundle }}
      run: ls -R bin/bundle/${{ matrix.dotnet-runtime.target }}

    - name: Zip MacOS bundle
      if: ${{ matrix.dotnet-runtime.mac-bundle }}
      working-directory: ${{ github.workspace }}/bin/bundle/${{ matrix.dotnet-runtime.target }}
      run: zip -r ${{ github.workspace }}/bin/bundle/${{ env.binariesName }}-bundle.zip *

    - name: Upload MacOS bundle artifact
      uses: actions/upload-artifact@v4
      if: ${{ matrix.dotnet-runtime.mac-bundle }}
      with:
        name: ${{ matrix.dotnet-runtime.target }}-bundle
        path: bin/bundle/${{ env.binariesName }}-bundle.zip

#    - name: Build MacOS dmg      
#      uses: L-Super/create-dmg-actions@v1.0.3
#      if: ${{ matrix.dotnet-runtime.mac-bundle }}
#      with:
#        dmg_name: ${{ env.binariesName }}
#        src_dir: bin/bundle/${{ matrix.dotnet-runtime.target }}/${{ env.bundleName }}     
#
#    - name: Upload MacOS dmg artifact
#      uses: actions/upload-artifact@v4
#      if: ${{ matrix.dotnet-runtime.mac-bundle }}
#      with:
#        name: ${{ matrix.dotnet-runtime.target }}-dmg
#        path: ${{ env.binariesName }}.dmg
